@page "/fetchdata"
@using BlazorCrud.Shared
@inject HttpClient Http
@inject NavigationManager Navigation

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn btn-danger"
                                @onclick="(() => DeleteForecast(forecast.Id))">
                            Delete
                        </button>
                        <button class="btn btn-info"
                                @onclick="(() => EditForecast(forecast.Id))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <button class="btn btn-success" @onclick="CreateForecast">Create entry</button>
    </div>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/weatherforecast");
    }

    private async Task DeleteForecast(int id)
    {
        await Http.DeleteAsync($"/api/weatherforecast/{id}");
        StateHasChanged();
    }

    private void EditForecast(int forecastId)
    {
        Navigation.NavigateTo("/editforecast/" + forecastId);
    }

    private void CreateForecast()
    {
        Navigation.NavigateTo("/createforecast");
    }

}
